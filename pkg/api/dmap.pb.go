// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dmap.proto

package dmap

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetOrCreateMapRequest struct {
	MapName              string   `protobuf:"bytes,1,opt,name=mapName,proto3" json:"mapName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrCreateMapRequest) Reset()         { *m = GetOrCreateMapRequest{} }
func (m *GetOrCreateMapRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrCreateMapRequest) ProtoMessage()    {}
func (*GetOrCreateMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79c04d858743722, []int{0}
}

func (m *GetOrCreateMapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOrCreateMapRequest.Unmarshal(m, b)
}
func (m *GetOrCreateMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOrCreateMapRequest.Marshal(b, m, deterministic)
}
func (m *GetOrCreateMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrCreateMapRequest.Merge(m, src)
}
func (m *GetOrCreateMapRequest) XXX_Size() int {
	return xxx_messageInfo_GetOrCreateMapRequest.Size(m)
}
func (m *GetOrCreateMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrCreateMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrCreateMapRequest proto.InternalMessageInfo

func (m *GetOrCreateMapRequest) GetMapName() string {
	if m != nil {
		return m.MapName
	}
	return ""
}

type GetOrCreateMapResponse struct {
	MapObject            map[string]string `protobuf:"bytes,1,rep,name=mapObject,proto3" json:"mapObject,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetOrCreateMapResponse) Reset()         { *m = GetOrCreateMapResponse{} }
func (m *GetOrCreateMapResponse) String() string { return proto.CompactTextString(m) }
func (*GetOrCreateMapResponse) ProtoMessage()    {}
func (*GetOrCreateMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79c04d858743722, []int{1}
}

func (m *GetOrCreateMapResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOrCreateMapResponse.Unmarshal(m, b)
}
func (m *GetOrCreateMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOrCreateMapResponse.Marshal(b, m, deterministic)
}
func (m *GetOrCreateMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrCreateMapResponse.Merge(m, src)
}
func (m *GetOrCreateMapResponse) XXX_Size() int {
	return xxx_messageInfo_GetOrCreateMapResponse.Size(m)
}
func (m *GetOrCreateMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrCreateMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrCreateMapResponse proto.InternalMessageInfo

func (m *GetOrCreateMapResponse) GetMapObject() map[string]string {
	if m != nil {
		return m.MapObject
	}
	return nil
}

type DMapGetRequest struct {
	MapName              string   `protobuf:"bytes,1,opt,name=mapName,proto3" json:"mapName,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DMapGetRequest) Reset()         { *m = DMapGetRequest{} }
func (m *DMapGetRequest) String() string { return proto.CompactTextString(m) }
func (*DMapGetRequest) ProtoMessage()    {}
func (*DMapGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79c04d858743722, []int{2}
}

func (m *DMapGetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DMapGetRequest.Unmarshal(m, b)
}
func (m *DMapGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DMapGetRequest.Marshal(b, m, deterministic)
}
func (m *DMapGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DMapGetRequest.Merge(m, src)
}
func (m *DMapGetRequest) XXX_Size() int {
	return xxx_messageInfo_DMapGetRequest.Size(m)
}
func (m *DMapGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DMapGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DMapGetRequest proto.InternalMessageInfo

func (m *DMapGetRequest) GetMapName() string {
	if m != nil {
		return m.MapName
	}
	return ""
}

func (m *DMapGetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DMapGetResponse struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DMapGetResponse) Reset()         { *m = DMapGetResponse{} }
func (m *DMapGetResponse) String() string { return proto.CompactTextString(m) }
func (*DMapGetResponse) ProtoMessage()    {}
func (*DMapGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79c04d858743722, []int{3}
}

func (m *DMapGetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DMapGetResponse.Unmarshal(m, b)
}
func (m *DMapGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DMapGetResponse.Marshal(b, m, deterministic)
}
func (m *DMapGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DMapGetResponse.Merge(m, src)
}
func (m *DMapGetResponse) XXX_Size() int {
	return xxx_messageInfo_DMapGetResponse.Size(m)
}
func (m *DMapGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DMapGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DMapGetResponse proto.InternalMessageInfo

func (m *DMapGetResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DMapSetRequest struct {
	MapName              string   `protobuf:"bytes,1,opt,name=mapName,proto3" json:"mapName,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DMapSetRequest) Reset()         { *m = DMapSetRequest{} }
func (m *DMapSetRequest) String() string { return proto.CompactTextString(m) }
func (*DMapSetRequest) ProtoMessage()    {}
func (*DMapSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79c04d858743722, []int{4}
}

func (m *DMapSetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DMapSetRequest.Unmarshal(m, b)
}
func (m *DMapSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DMapSetRequest.Marshal(b, m, deterministic)
}
func (m *DMapSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DMapSetRequest.Merge(m, src)
}
func (m *DMapSetRequest) XXX_Size() int {
	return xxx_messageInfo_DMapSetRequest.Size(m)
}
func (m *DMapSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DMapSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DMapSetRequest proto.InternalMessageInfo

func (m *DMapSetRequest) GetMapName() string {
	if m != nil {
		return m.MapName
	}
	return ""
}

func (m *DMapSetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DMapSetRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DMapSetResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DMapSetResponse) Reset()         { *m = DMapSetResponse{} }
func (m *DMapSetResponse) String() string { return proto.CompactTextString(m) }
func (*DMapSetResponse) ProtoMessage()    {}
func (*DMapSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79c04d858743722, []int{5}
}

func (m *DMapSetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DMapSetResponse.Unmarshal(m, b)
}
func (m *DMapSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DMapSetResponse.Marshal(b, m, deterministic)
}
func (m *DMapSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DMapSetResponse.Merge(m, src)
}
func (m *DMapSetResponse) XXX_Size() int {
	return xxx_messageInfo_DMapSetResponse.Size(m)
}
func (m *DMapSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DMapSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DMapSetResponse proto.InternalMessageInfo

func (m *DMapSetResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*GetOrCreateMapRequest)(nil), "GetOrCreateMapRequest")
	proto.RegisterType((*GetOrCreateMapResponse)(nil), "GetOrCreateMapResponse")
	proto.RegisterMapType((map[string]string)(nil), "GetOrCreateMapResponse.MapObjectEntry")
	proto.RegisterType((*DMapGetRequest)(nil), "DMapGetRequest")
	proto.RegisterType((*DMapGetResponse)(nil), "DMapGetResponse")
	proto.RegisterType((*DMapSetRequest)(nil), "DMapSetRequest")
	proto.RegisterType((*DMapSetResponse)(nil), "DMapSetResponse")
}

func init() {
	proto.RegisterFile("dmap.proto", fileDescriptor_f79c04d858743722)
}

var fileDescriptor_f79c04d858743722 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x4e, 0xfa, 0x40,
	0x14, 0xc5, 0x99, 0x92, 0x3f, 0xfc, 0xb9, 0x18, 0x20, 0xa3, 0x62, 0xc3, 0x8a, 0xcc, 0x42, 0x71,
	0x33, 0x89, 0xb0, 0x31, 0x86, 0x1d, 0x18, 0xdc, 0x20, 0x49, 0xe7, 0x09, 0x06, 0xb8, 0x21, 0xa8,
	0x85, 0xb1, 0x33, 0x25, 0xe1, 0x5d, 0x7c, 0x3e, 0x9f, 0xc3, 0xd0, 0x2f, 0xda, 0xa6, 0x7e, 0x84,
	0x5d, 0x6f, 0xe7, 0x9c, 0xf3, 0xeb, 0xbd, 0xb7, 0x03, 0xb0, 0x74, 0xa5, 0xe2, 0xca, 0xdb, 0x9a,
	0x2d, 0xbb, 0x83, 0xcb, 0x09, 0x9a, 0x99, 0x37, 0xf2, 0x50, 0x1a, 0x9c, 0x4a, 0xe5, 0xe0, 0xbb,
	0x8f, 0xda, 0x50, 0x1b, 0xaa, 0xae, 0x54, 0xcf, 0xd2, 0x45, 0x9b, 0x74, 0x49, 0xaf, 0xe6, 0xc4,
	0x25, 0xfb, 0x20, 0xd0, 0xce, 0x7b, 0xb4, 0xda, 0x6e, 0x34, 0xd2, 0x31, 0xd4, 0x5c, 0xa9, 0x66,
	0xf3, 0x17, 0x5c, 0x18, 0x9b, 0x74, 0xcb, 0xbd, 0x7a, 0xff, 0x9a, 0x17, 0x6b, 0xf9, 0x34, 0x16,
	0x3e, 0x6e, 0x8c, 0xb7, 0x77, 0x8e, 0xc6, 0xce, 0x10, 0x1a, 0xd9, 0x43, 0xda, 0x82, 0xf2, 0x2b,
	0xee, 0xa3, 0x0f, 0x39, 0x3c, 0xd2, 0x0b, 0xf8, 0xb7, 0x93, 0x6f, 0x3e, 0xda, 0x56, 0xf0, 0x2e,
	0x2c, 0x1e, 0xac, 0x7b, 0xc2, 0x86, 0xd0, 0x18, 0x4f, 0xa5, 0x9a, 0xa0, 0xf9, 0xb5, 0x95, 0x38,
	0xd7, 0x4a, 0x72, 0xd9, 0x0d, 0x34, 0x13, 0x77, 0xd4, 0x54, 0x82, 0x22, 0x29, 0x14, 0x73, 0x42,
	0x8c, 0x38, 0x09, 0x73, 0xcc, 0x2c, 0xa7, 0x33, 0x6f, 0x43, 0xb8, 0x48, 0xc1, 0xdb, 0x50, 0xd1,
	0x46, 0x1a, 0x5f, 0x07, 0x99, 0xff, 0x9d, 0xa8, 0xea, 0x7f, 0x5a, 0x50, 0x0f, 0xb5, 0xde, 0x6e,
	0xbd, 0x40, 0x3a, 0x82, 0xc6, 0x2a, 0x33, 0x67, 0xda, 0xe6, 0x85, 0x8b, 0xed, 0x5c, 0x7d, 0xb3,
	0x10, 0x56, 0xa2, 0x4f, 0x70, 0xbe, 0xca, 0x9d, 0x2d, 0xd7, 0xfa, 0x94, 0x24, 0x0e, 0xd5, 0xc3,
	0x4f, 0x36, 0x41, 0x43, 0x9b, 0x3c, 0xbb, 0x8e, 0x4e, 0x8b, 0xe7, 0x26, 0xcc, 0x4a, 0x74, 0x00,
	0x67, 0x91, 0x3e, 0x44, 0xfe, 0xc9, 0x14, 0x41, 0x44, 0x02, 0x11, 0x79, 0xbd, 0x28, 0x82, 0x88,
	0x2c, 0xe4, 0x67, 0xd3, 0xbc, 0x12, 0xdc, 0x93, 0xc1, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba,
	0x9a, 0x93, 0xf6, 0x35, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DMapServiceClient is the client API for DMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DMapServiceClient interface {
	GetOrCreateMap(ctx context.Context, in *GetOrCreateMapRequest, opts ...grpc.CallOption) (*GetOrCreateMapResponse, error)
	GetOrCreateMapRedis(ctx context.Context, in *GetOrCreateMapRequest, opts ...grpc.CallOption) (*GetOrCreateMapResponse, error)
	DmapGet(ctx context.Context, in *DMapGetRequest, opts ...grpc.CallOption) (*DMapGetResponse, error)
	DmapGetRedis(ctx context.Context, in *DMapGetRequest, opts ...grpc.CallOption) (*DMapGetResponse, error)
	DmapSet(ctx context.Context, in *DMapSetRequest, opts ...grpc.CallOption) (*DMapSetResponse, error)
	DmapSetRedis(ctx context.Context, in *DMapSetRequest, opts ...grpc.CallOption) (*DMapSetResponse, error)
}

type dMapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDMapServiceClient(cc grpc.ClientConnInterface) DMapServiceClient {
	return &dMapServiceClient{cc}
}

func (c *dMapServiceClient) GetOrCreateMap(ctx context.Context, in *GetOrCreateMapRequest, opts ...grpc.CallOption) (*GetOrCreateMapResponse, error) {
	out := new(GetOrCreateMapResponse)
	err := c.cc.Invoke(ctx, "/DMapService/getOrCreateMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMapServiceClient) GetOrCreateMapRedis(ctx context.Context, in *GetOrCreateMapRequest, opts ...grpc.CallOption) (*GetOrCreateMapResponse, error) {
	out := new(GetOrCreateMapResponse)
	err := c.cc.Invoke(ctx, "/DMapService/getOrCreateMapRedis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMapServiceClient) DmapGet(ctx context.Context, in *DMapGetRequest, opts ...grpc.CallOption) (*DMapGetResponse, error) {
	out := new(DMapGetResponse)
	err := c.cc.Invoke(ctx, "/DMapService/dmapGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMapServiceClient) DmapGetRedis(ctx context.Context, in *DMapGetRequest, opts ...grpc.CallOption) (*DMapGetResponse, error) {
	out := new(DMapGetResponse)
	err := c.cc.Invoke(ctx, "/DMapService/dmapGetRedis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMapServiceClient) DmapSet(ctx context.Context, in *DMapSetRequest, opts ...grpc.CallOption) (*DMapSetResponse, error) {
	out := new(DMapSetResponse)
	err := c.cc.Invoke(ctx, "/DMapService/dmapSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMapServiceClient) DmapSetRedis(ctx context.Context, in *DMapSetRequest, opts ...grpc.CallOption) (*DMapSetResponse, error) {
	out := new(DMapSetResponse)
	err := c.cc.Invoke(ctx, "/DMapService/dmapSetRedis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DMapServiceServer is the server API for DMapService service.
type DMapServiceServer interface {
	GetOrCreateMap(context.Context, *GetOrCreateMapRequest) (*GetOrCreateMapResponse, error)
	GetOrCreateMapRedis(context.Context, *GetOrCreateMapRequest) (*GetOrCreateMapResponse, error)
	DmapGet(context.Context, *DMapGetRequest) (*DMapGetResponse, error)
	DmapGetRedis(context.Context, *DMapGetRequest) (*DMapGetResponse, error)
	DmapSet(context.Context, *DMapSetRequest) (*DMapSetResponse, error)
	DmapSetRedis(context.Context, *DMapSetRequest) (*DMapSetResponse, error)
}

// UnimplementedDMapServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDMapServiceServer struct {
}

func (*UnimplementedDMapServiceServer) GetOrCreateMap(ctx context.Context, req *GetOrCreateMapRequest) (*GetOrCreateMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateMap not implemented")
}
func (*UnimplementedDMapServiceServer) GetOrCreateMapRedis(ctx context.Context, req *GetOrCreateMapRequest) (*GetOrCreateMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateMapRedis not implemented")
}
func (*UnimplementedDMapServiceServer) DmapGet(ctx context.Context, req *DMapGetRequest) (*DMapGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DmapGet not implemented")
}
func (*UnimplementedDMapServiceServer) DmapGetRedis(ctx context.Context, req *DMapGetRequest) (*DMapGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DmapGetRedis not implemented")
}
func (*UnimplementedDMapServiceServer) DmapSet(ctx context.Context, req *DMapSetRequest) (*DMapSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DmapSet not implemented")
}
func (*UnimplementedDMapServiceServer) DmapSetRedis(ctx context.Context, req *DMapSetRequest) (*DMapSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DmapSetRedis not implemented")
}

func RegisterDMapServiceServer(s *grpc.Server, srv DMapServiceServer) {
	s.RegisterService(&_DMapService_serviceDesc, srv)
}

func _DMapService_GetOrCreateMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrCreateMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMapServiceServer).GetOrCreateMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMapService/GetOrCreateMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMapServiceServer).GetOrCreateMap(ctx, req.(*GetOrCreateMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMapService_GetOrCreateMapRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrCreateMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMapServiceServer).GetOrCreateMapRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMapService/GetOrCreateMapRedis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMapServiceServer).GetOrCreateMapRedis(ctx, req.(*GetOrCreateMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMapService_DmapGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DMapGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMapServiceServer).DmapGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMapService/DmapGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMapServiceServer).DmapGet(ctx, req.(*DMapGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMapService_DmapGetRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DMapGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMapServiceServer).DmapGetRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMapService/DmapGetRedis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMapServiceServer).DmapGetRedis(ctx, req.(*DMapGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMapService_DmapSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DMapSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMapServiceServer).DmapSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMapService/DmapSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMapServiceServer).DmapSet(ctx, req.(*DMapSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMapService_DmapSetRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DMapSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMapServiceServer).DmapSetRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMapService/DmapSetRedis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMapServiceServer).DmapSetRedis(ctx, req.(*DMapSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DMapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DMapService",
	HandlerType: (*DMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOrCreateMap",
			Handler:    _DMapService_GetOrCreateMap_Handler,
		},
		{
			MethodName: "getOrCreateMapRedis",
			Handler:    _DMapService_GetOrCreateMapRedis_Handler,
		},
		{
			MethodName: "dmapGet",
			Handler:    _DMapService_DmapGet_Handler,
		},
		{
			MethodName: "dmapGetRedis",
			Handler:    _DMapService_DmapGetRedis_Handler,
		},
		{
			MethodName: "dmapSet",
			Handler:    _DMapService_DmapSet_Handler,
		},
		{
			MethodName: "dmapSetRedis",
			Handler:    _DMapService_DmapSetRedis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dmap.proto",
}
